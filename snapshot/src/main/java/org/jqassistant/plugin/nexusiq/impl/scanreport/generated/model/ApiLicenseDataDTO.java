/*
 * Sonatype IQ Server
 * This documents the available APIs into [Sonatype IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management).
 *
 * The version of the OpenAPI document: 164
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.jqassistant.plugin.nexusiq.impl.scanreport.generated.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * ApiLicenseDataDTO
 */
@JsonPropertyOrder({
    ApiLicenseDataDTO.JSON_PROPERTY_DECLARED_LICENSES,
    ApiLicenseDataDTO.JSON_PROPERTY_EFFECTIVE_LICENSES,
    ApiLicenseDataDTO.JSON_PROPERTY_OBSERVED_LICENSES,
    ApiLicenseDataDTO.JSON_PROPERTY_OVERRIDDEN_LICENSES,
    ApiLicenseDataDTO.JSON_PROPERTY_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-26T13:18:09.990569236+02:00[Europe/Berlin]")
public class ApiLicenseDataDTO {
    public static final String JSON_PROPERTY_DECLARED_LICENSES = "declaredLicenses";
    public static final String JSON_PROPERTY_EFFECTIVE_LICENSES = "effectiveLicenses";
    public static final String JSON_PROPERTY_OBSERVED_LICENSES = "observedLicenses";
    public static final String JSON_PROPERTY_OVERRIDDEN_LICENSES = "overriddenLicenses";
    public static final String JSON_PROPERTY_STATUS = "status";
    private List<ApiLicenseDTO> declaredLicenses = null;
    private List<ApiLicenseDTO> effectiveLicenses = null;
    private List<ApiLicenseDTO> observedLicenses = null;
    private List<ApiLicenseDTO> overriddenLicenses = null;
    private String status;

    public ApiLicenseDataDTO() {
    }

    public ApiLicenseDataDTO declaredLicenses(List<ApiLicenseDTO> declaredLicenses) {
        this.declaredLicenses = declaredLicenses;
        return this;
    }

    public ApiLicenseDataDTO addDeclaredLicensesItem(ApiLicenseDTO declaredLicensesItem) {
        if (this.declaredLicenses == null) {
            this.declaredLicenses = new ArrayList<>();
        }
        this.declaredLicenses.add(declaredLicensesItem);
        return this;
    }

    /**
     * Get declaredLicenses
     *
     * @return declaredLicenses
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DECLARED_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ApiLicenseDTO> getDeclaredLicenses() {
        return declaredLicenses;
    }


    @JsonProperty(JSON_PROPERTY_DECLARED_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeclaredLicenses(List<ApiLicenseDTO> declaredLicenses) {
        this.declaredLicenses = declaredLicenses;
    }


    public ApiLicenseDataDTO effectiveLicenses(List<ApiLicenseDTO> effectiveLicenses) {
        this.effectiveLicenses = effectiveLicenses;
        return this;
    }

    public ApiLicenseDataDTO addEffectiveLicensesItem(ApiLicenseDTO effectiveLicensesItem) {
        if (this.effectiveLicenses == null) {
            this.effectiveLicenses = new ArrayList<>();
        }
        this.effectiveLicenses.add(effectiveLicensesItem);
        return this;
    }

    /**
     * Get effectiveLicenses
     *
     * @return effectiveLicenses
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_EFFECTIVE_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ApiLicenseDTO> getEffectiveLicenses() {
        return effectiveLicenses;
    }


    @JsonProperty(JSON_PROPERTY_EFFECTIVE_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEffectiveLicenses(List<ApiLicenseDTO> effectiveLicenses) {
        this.effectiveLicenses = effectiveLicenses;
    }


    public ApiLicenseDataDTO observedLicenses(List<ApiLicenseDTO> observedLicenses) {
        this.observedLicenses = observedLicenses;
        return this;
    }

    public ApiLicenseDataDTO addObservedLicensesItem(ApiLicenseDTO observedLicensesItem) {
        if (this.observedLicenses == null) {
            this.observedLicenses = new ArrayList<>();
        }
        this.observedLicenses.add(observedLicensesItem);
        return this;
    }

    /**
     * Get observedLicenses
     *
     * @return observedLicenses
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_OBSERVED_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ApiLicenseDTO> getObservedLicenses() {
        return observedLicenses;
    }


    @JsonProperty(JSON_PROPERTY_OBSERVED_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setObservedLicenses(List<ApiLicenseDTO> observedLicenses) {
        this.observedLicenses = observedLicenses;
    }


    public ApiLicenseDataDTO overriddenLicenses(List<ApiLicenseDTO> overriddenLicenses) {
        this.overriddenLicenses = overriddenLicenses;
        return this;
    }

    public ApiLicenseDataDTO addOverriddenLicensesItem(ApiLicenseDTO overriddenLicensesItem) {
        if (this.overriddenLicenses == null) {
            this.overriddenLicenses = new ArrayList<>();
        }
        this.overriddenLicenses.add(overriddenLicensesItem);
        return this;
    }

    /**
     * Get overriddenLicenses
     *
     * @return overriddenLicenses
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_OVERRIDDEN_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<ApiLicenseDTO> getOverriddenLicenses() {
        return overriddenLicenses;
    }


    @JsonProperty(JSON_PROPERTY_OVERRIDDEN_LICENSES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOverriddenLicenses(List<ApiLicenseDTO> overriddenLicenses) {
        this.overriddenLicenses = overriddenLicenses;
    }


    public ApiLicenseDataDTO status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getStatus() {
        return status;
    }


    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatus(String status) {
        this.status = status;
    }


    /**
     * Return true if this ApiLicenseDataDTO object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiLicenseDataDTO apiLicenseDataDTO = (ApiLicenseDataDTO) o;
        return Objects.equals(this.declaredLicenses, apiLicenseDataDTO.declaredLicenses) &&
            Objects.equals(this.effectiveLicenses, apiLicenseDataDTO.effectiveLicenses) &&
            Objects.equals(this.observedLicenses, apiLicenseDataDTO.observedLicenses) &&
            Objects.equals(this.overriddenLicenses, apiLicenseDataDTO.overriddenLicenses) &&
            Objects.equals(this.status, apiLicenseDataDTO.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(declaredLicenses, effectiveLicenses, observedLicenses, overriddenLicenses, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApiLicenseDataDTO {\n");
        sb.append("    declaredLicenses: ").append(toIndentedString(declaredLicenses)).append("\n");
        sb.append("    effectiveLicenses: ").append(toIndentedString(effectiveLicenses)).append("\n");
        sb.append("    observedLicenses: ").append(toIndentedString(observedLicenses)).append("\n");
        sb.append("    overriddenLicenses: ").append(toIndentedString(overriddenLicenses)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

