/*
 * Sonatype IQ Server
 * This documents the available APIs into [Sonatype IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management).
 *
 * The version of the OpenAPI document: 164
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.jqassistant.plugin.nexusiq.impl.scanreport.generated.model;

import com.fasterxml.jackson.annotation.*;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * ApiSourceControlConfigurationDTO
 */
@JsonPropertyOrder({
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_CLONE_DIRECTORY,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_COMMIT_EMAIL,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_COMMIT_USERNAME,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_INTERVAL_HOURS,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_START_TIME,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_GIT_EXECUTABLE,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_GIT_IMPLEMENTATION,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_GIT_TIMEOUT_SECONDS,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_PR_COMMENT_PURGE_WINDOW,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_PR_EVENT_PURGE_WINDOW,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_PULL_REQUEST_MONITORING_INTERVAL_SECONDS,
    ApiSourceControlConfigurationDTO.JSON_PROPERTY_USE_USERNAME_IN_REPOSITORY_CLONE_URL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-26T13:18:09.990569236+02:00[Europe/Berlin]")
public class ApiSourceControlConfigurationDTO {
    public static final String JSON_PROPERTY_CLONE_DIRECTORY = "cloneDirectory";
    public static final String JSON_PROPERTY_COMMIT_EMAIL = "commitEmail";
    public static final String JSON_PROPERTY_COMMIT_USERNAME = "commitUsername";
    public static final String JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_INTERVAL_HOURS = "defaultBranchMonitoringIntervalHours";
    public static final String JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_START_TIME = "defaultBranchMonitoringStartTime";
    public static final String JSON_PROPERTY_GIT_EXECUTABLE = "gitExecutable";
    public static final String JSON_PROPERTY_GIT_IMPLEMENTATION = "gitImplementation";
    public static final String JSON_PROPERTY_GIT_TIMEOUT_SECONDS = "gitTimeoutSeconds";
    public static final String JSON_PROPERTY_PR_COMMENT_PURGE_WINDOW = "prCommentPurgeWindow";
    public static final String JSON_PROPERTY_PR_EVENT_PURGE_WINDOW = "prEventPurgeWindow";
    public static final String JSON_PROPERTY_PULL_REQUEST_MONITORING_INTERVAL_SECONDS = "pullRequestMonitoringIntervalSeconds";
    public static final String JSON_PROPERTY_USE_USERNAME_IN_REPOSITORY_CLONE_URL = "useUsernameInRepositoryCloneUrl";
    private String cloneDirectory;
    private String commitEmail;
    private String commitUsername;
    private Integer defaultBranchMonitoringIntervalHours;
    private String defaultBranchMonitoringStartTime;
    private String gitExecutable;
    private GitImplementationEnum gitImplementation;
    private Integer gitTimeoutSeconds;
    private Integer prCommentPurgeWindow;
    private Integer prEventPurgeWindow;
    private Integer pullRequestMonitoringIntervalSeconds;
    private Boolean useUsernameInRepositoryCloneUrl;
    public ApiSourceControlConfigurationDTO() {
    }

    public ApiSourceControlConfigurationDTO cloneDirectory(String cloneDirectory) {
        this.cloneDirectory = cloneDirectory;
        return this;
    }

    /**
     * Get cloneDirectory
     *
     * @return cloneDirectory
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_CLONE_DIRECTORY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCloneDirectory() {
        return cloneDirectory;
    }

    @JsonProperty(JSON_PROPERTY_CLONE_DIRECTORY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCloneDirectory(String cloneDirectory) {
        this.cloneDirectory = cloneDirectory;
    }

    public ApiSourceControlConfigurationDTO commitEmail(String commitEmail) {
        this.commitEmail = commitEmail;
        return this;
    }

    /**
     * Get commitEmail
     *
     * @return commitEmail
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_COMMIT_EMAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCommitEmail() {
        return commitEmail;
    }

    @JsonProperty(JSON_PROPERTY_COMMIT_EMAIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCommitEmail(String commitEmail) {
        this.commitEmail = commitEmail;
    }

    public ApiSourceControlConfigurationDTO commitUsername(String commitUsername) {
        this.commitUsername = commitUsername;
        return this;
    }

    /**
     * Get commitUsername
     *
     * @return commitUsername
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_COMMIT_USERNAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCommitUsername() {
        return commitUsername;
    }

    @JsonProperty(JSON_PROPERTY_COMMIT_USERNAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCommitUsername(String commitUsername) {
        this.commitUsername = commitUsername;
    }

    public ApiSourceControlConfigurationDTO defaultBranchMonitoringIntervalHours(Integer defaultBranchMonitoringIntervalHours) {
        this.defaultBranchMonitoringIntervalHours = defaultBranchMonitoringIntervalHours;
        return this;
    }

    /**
     * Get defaultBranchMonitoringIntervalHours
     *
     * @return defaultBranchMonitoringIntervalHours
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_INTERVAL_HOURS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getDefaultBranchMonitoringIntervalHours() {
        return defaultBranchMonitoringIntervalHours;
    }

    @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_INTERVAL_HOURS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDefaultBranchMonitoringIntervalHours(Integer defaultBranchMonitoringIntervalHours) {
        this.defaultBranchMonitoringIntervalHours = defaultBranchMonitoringIntervalHours;
    }

    public ApiSourceControlConfigurationDTO defaultBranchMonitoringStartTime(String defaultBranchMonitoringStartTime) {
        this.defaultBranchMonitoringStartTime = defaultBranchMonitoringStartTime;
        return this;
    }

    /**
     * Get defaultBranchMonitoringStartTime
     *
     * @return defaultBranchMonitoringStartTime
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_START_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDefaultBranchMonitoringStartTime() {
        return defaultBranchMonitoringStartTime;
    }

    @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_MONITORING_START_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDefaultBranchMonitoringStartTime(String defaultBranchMonitoringStartTime) {
        this.defaultBranchMonitoringStartTime = defaultBranchMonitoringStartTime;
    }

    public ApiSourceControlConfigurationDTO gitExecutable(String gitExecutable) {
        this.gitExecutable = gitExecutable;
        return this;
    }

    /**
     * Get gitExecutable
     *
     * @return gitExecutable
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_GIT_EXECUTABLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getGitExecutable() {
        return gitExecutable;
    }

    @JsonProperty(JSON_PROPERTY_GIT_EXECUTABLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGitExecutable(String gitExecutable) {
        this.gitExecutable = gitExecutable;
    }

    public ApiSourceControlConfigurationDTO gitImplementation(GitImplementationEnum gitImplementation) {
        this.gitImplementation = gitImplementation;
        return this;
    }

    /**
     * Get gitImplementation
     *
     * @return gitImplementation
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_GIT_IMPLEMENTATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public GitImplementationEnum getGitImplementation() {
        return gitImplementation;
    }

    @JsonProperty(JSON_PROPERTY_GIT_IMPLEMENTATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGitImplementation(GitImplementationEnum gitImplementation) {
        this.gitImplementation = gitImplementation;
    }

    public ApiSourceControlConfigurationDTO gitTimeoutSeconds(Integer gitTimeoutSeconds) {
        this.gitTimeoutSeconds = gitTimeoutSeconds;
        return this;
    }

    /**
     * Get gitTimeoutSeconds
     *
     * @return gitTimeoutSeconds
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_GIT_TIMEOUT_SECONDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getGitTimeoutSeconds() {
        return gitTimeoutSeconds;
    }

    @JsonProperty(JSON_PROPERTY_GIT_TIMEOUT_SECONDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGitTimeoutSeconds(Integer gitTimeoutSeconds) {
        this.gitTimeoutSeconds = gitTimeoutSeconds;
    }

    public ApiSourceControlConfigurationDTO prCommentPurgeWindow(Integer prCommentPurgeWindow) {
        this.prCommentPurgeWindow = prCommentPurgeWindow;
        return this;
    }

    /**
     * Get prCommentPurgeWindow
     *
     * @return prCommentPurgeWindow
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_PR_COMMENT_PURGE_WINDOW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getPrCommentPurgeWindow() {
        return prCommentPurgeWindow;
    }

    @JsonProperty(JSON_PROPERTY_PR_COMMENT_PURGE_WINDOW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrCommentPurgeWindow(Integer prCommentPurgeWindow) {
        this.prCommentPurgeWindow = prCommentPurgeWindow;
    }

    public ApiSourceControlConfigurationDTO prEventPurgeWindow(Integer prEventPurgeWindow) {
        this.prEventPurgeWindow = prEventPurgeWindow;
        return this;
    }

    /**
     * Get prEventPurgeWindow
     *
     * @return prEventPurgeWindow
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_PR_EVENT_PURGE_WINDOW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getPrEventPurgeWindow() {
        return prEventPurgeWindow;
    }

    @JsonProperty(JSON_PROPERTY_PR_EVENT_PURGE_WINDOW)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrEventPurgeWindow(Integer prEventPurgeWindow) {
        this.prEventPurgeWindow = prEventPurgeWindow;
    }

    public ApiSourceControlConfigurationDTO pullRequestMonitoringIntervalSeconds(Integer pullRequestMonitoringIntervalSeconds) {
        this.pullRequestMonitoringIntervalSeconds = pullRequestMonitoringIntervalSeconds;
        return this;
    }

    /**
     * Get pullRequestMonitoringIntervalSeconds
     *
     * @return pullRequestMonitoringIntervalSeconds
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_PULL_REQUEST_MONITORING_INTERVAL_SECONDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getPullRequestMonitoringIntervalSeconds() {
        return pullRequestMonitoringIntervalSeconds;
    }

    @JsonProperty(JSON_PROPERTY_PULL_REQUEST_MONITORING_INTERVAL_SECONDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPullRequestMonitoringIntervalSeconds(Integer pullRequestMonitoringIntervalSeconds) {
        this.pullRequestMonitoringIntervalSeconds = pullRequestMonitoringIntervalSeconds;
    }

    public ApiSourceControlConfigurationDTO useUsernameInRepositoryCloneUrl(Boolean useUsernameInRepositoryCloneUrl) {
        this.useUsernameInRepositoryCloneUrl = useUsernameInRepositoryCloneUrl;
        return this;
    }

    /**
     * Get useUsernameInRepositoryCloneUrl
     *
     * @return useUsernameInRepositoryCloneUrl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_USE_USERNAME_IN_REPOSITORY_CLONE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getUseUsernameInRepositoryCloneUrl() {
        return useUsernameInRepositoryCloneUrl;
    }

    @JsonProperty(JSON_PROPERTY_USE_USERNAME_IN_REPOSITORY_CLONE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUseUsernameInRepositoryCloneUrl(Boolean useUsernameInRepositoryCloneUrl) {
        this.useUsernameInRepositoryCloneUrl = useUsernameInRepositoryCloneUrl;
    }

    /**
     * Return true if this ApiSourceControlConfigurationDTO object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiSourceControlConfigurationDTO apiSourceControlConfigurationDTO = (ApiSourceControlConfigurationDTO) o;
        return Objects.equals(this.cloneDirectory, apiSourceControlConfigurationDTO.cloneDirectory) &&
            Objects.equals(this.commitEmail, apiSourceControlConfigurationDTO.commitEmail) &&
            Objects.equals(this.commitUsername, apiSourceControlConfigurationDTO.commitUsername) &&
            Objects.equals(this.defaultBranchMonitoringIntervalHours, apiSourceControlConfigurationDTO.defaultBranchMonitoringIntervalHours) &&
            Objects.equals(this.defaultBranchMonitoringStartTime, apiSourceControlConfigurationDTO.defaultBranchMonitoringStartTime) &&
            Objects.equals(this.gitExecutable, apiSourceControlConfigurationDTO.gitExecutable) &&
            Objects.equals(this.gitImplementation, apiSourceControlConfigurationDTO.gitImplementation) &&
            Objects.equals(this.gitTimeoutSeconds, apiSourceControlConfigurationDTO.gitTimeoutSeconds) &&
            Objects.equals(this.prCommentPurgeWindow, apiSourceControlConfigurationDTO.prCommentPurgeWindow) &&
            Objects.equals(this.prEventPurgeWindow, apiSourceControlConfigurationDTO.prEventPurgeWindow) &&
            Objects.equals(this.pullRequestMonitoringIntervalSeconds, apiSourceControlConfigurationDTO.pullRequestMonitoringIntervalSeconds) &&
            Objects.equals(this.useUsernameInRepositoryCloneUrl, apiSourceControlConfigurationDTO.useUsernameInRepositoryCloneUrl);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cloneDirectory, commitEmail, commitUsername, defaultBranchMonitoringIntervalHours, defaultBranchMonitoringStartTime, gitExecutable, gitImplementation, gitTimeoutSeconds, prCommentPurgeWindow, prEventPurgeWindow, pullRequestMonitoringIntervalSeconds, useUsernameInRepositoryCloneUrl);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApiSourceControlConfigurationDTO {\n");
        sb.append("    cloneDirectory: ").append(toIndentedString(cloneDirectory)).append("\n");
        sb.append("    commitEmail: ").append(toIndentedString(commitEmail)).append("\n");
        sb.append("    commitUsername: ").append(toIndentedString(commitUsername)).append("\n");
        sb.append("    defaultBranchMonitoringIntervalHours: ").append(toIndentedString(defaultBranchMonitoringIntervalHours)).append("\n");
        sb.append("    defaultBranchMonitoringStartTime: ").append(toIndentedString(defaultBranchMonitoringStartTime)).append("\n");
        sb.append("    gitExecutable: ").append(toIndentedString(gitExecutable)).append("\n");
        sb.append("    gitImplementation: ").append(toIndentedString(gitImplementation)).append("\n");
        sb.append("    gitTimeoutSeconds: ").append(toIndentedString(gitTimeoutSeconds)).append("\n");
        sb.append("    prCommentPurgeWindow: ").append(toIndentedString(prCommentPurgeWindow)).append("\n");
        sb.append("    prEventPurgeWindow: ").append(toIndentedString(prEventPurgeWindow)).append("\n");
        sb.append("    pullRequestMonitoringIntervalSeconds: ").append(toIndentedString(pullRequestMonitoringIntervalSeconds)).append("\n");
        sb.append("    useUsernameInRepositoryCloneUrl: ").append(toIndentedString(useUsernameInRepositoryCloneUrl)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets gitImplementation
     */
    public enum GitImplementationEnum {
        NATIVE("native"),

        JAVA("java");

        private String value;

        GitImplementationEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static GitImplementationEnum fromValue(String value) {
            for (GitImplementationEnum b : GitImplementationEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

